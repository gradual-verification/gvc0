#use <args>

// Tree node
struct Node
{
  int total;
  struct Node *left;
  struct Node *right;
  struct Node *parent;
};

/*@
predicate subtreeHelper(struct Node *l, struct Node *r, struct Node *parent, int total) =
  (l == NULL) ?
    (
      (r == NULL) ?
        total == 1 
        :
        acc(r->left) && acc(r->right) && acc(r->parent) && acc(r->total) &&
        r->parent == parent && subtreeHelper(r->left, r->right, r, r->total) &&
        total == 1 + r->total
    ) 
    :
    (
      (r == NULL) ?
        acc(l->left) && acc(l->right) && acc(l->parent) && acc(l->total) &&
        l->parent == parent && subtreeHelper(l->left, l->right, l, l->total) &&
        total == 1 + l->total 
        :
        acc(r->left) && acc(r->right) && acc(r->parent) && acc(r->total) &&
        r->parent == parent && subtreeHelper(r->left, r->right, r, r->total) &&
        acc(l->left) && acc(l->right) && acc(l->parent) && acc(l->total) &&
        l->parent == parent && subtreeHelper(l->left, l->right, l, l->total) &&
        total == 1 + l->total + r->total
    ) ;
@*/

/*@
// TODO: pickup debugging --- subtreeHelper in the context def is the issue causing the error, in both places it is used, works in backend: ie. ran as a silver program translated from this in the console and was fine    
predicate context(struct Node *node, struct Node *parent, int total) =
  (parent == NULL) ?
    ( true )
    :
    (
      acc(parent->left) && acc(parent->right) && acc(parent->parent) && acc(parent->total) &&
      context(parent, parent->parent, parent->total) &&
      ((node == parent->left) ?
        (
          (parent->right == NULL) ?
            ( parent->total == 1 + total )
            :
            (
              acc(parent->right->left) && acc(parent->right->right) && acc(parent->right->parent) && acc(parent->right->total) &&
              parent->right->parent == parent && subtreeHelper(parent->right->left, parent->right->right, parent->right, parent->right->total) &&
              parent->total == 1 + total + parent->right->total 
            )
        )
        :
        (
          node == parent->right &&
          ((parent->left == NULL) ?
            ( parent->total == 1 + total )
            :
            (
              acc(parent->left->left) && acc(parent->left->right) && acc(parent->left->parent) && acc(parent->left->total) &&
              parent->left->parent == parent && subtreeHelper(parent->left->left, parent->left->right, parent->left, parent->left->total) &&
              parent->total == 1 + total + parent->left->total
            )
          )
        )
      )
    ) ;
@*/

/*@
predicate tree(struct Node *node) =
  (node == NULL) ?
    ( true )
    :
    (
      acc(node->left) && acc(node->right) && acc(node->parent) && acc(node->total) &&
      context(node, node->parent, node->total) && subtreeHelper(node->left, node->right, node, node->total) 
    ) ;
@*/

struct Node *create_tree()
  //@ requires true;
  //@ ensures tree(\result);
{
  struct Node *n = alloc(struct Node);
  n->left = NULL;
  n->right = NULL;
  n->parent = NULL;
  n->total = 1;
  //@ fold subtreeHelper(n->left, n->right, n, n->total);
  //@ fold context(n, n->parent, n->total);
  //@ fold tree(n);
  return n;
}

int tree_get_total(struct Node *node)
  //@ requires tree(node);
  //@ ensures tree(node);
{
  //@ unfold tree(node);
  int result = 0;
  if (node == NULL) {
  } else {
    result = node->total;
  }
  //@ fold tree(node);
  return result;
}


int fixup_ancestors(struct Node *node, struct Node *parent, int oldTotal, int newTotal)
  //@ requires context(node, parent, oldTotal);
  //@ ensures context(node, parent, newTotal);
{
  //@ unfold context(node, parent, oldTotal);
  if (parent == NULL) {
  } else {
    struct Node *left = parent->left;
    struct Node *right = parent->right;
    struct Node *grandparent = parent->parent;
    int oldparentTotal = parent->total;
    int leftTotal = 0;
    int rightTotal = 0;
    if (node == left) {
      leftTotal = newTotal;
      if (right != NULL) {
        rightTotal = right->total;
      }
    } else {
      if (left != NULL) {
        leftTotal = left->total;
      }
      rightTotal = newTotal;
    }
    
    int parentTotal = 1 + leftTotal + rightTotal;
    parent->total = parentTotal;
    fixup_ancestors(parent, grandparent, oldparentTotal, parentTotal);
  }
  //@ fold context(node, parent, newTotal);
  return 0;
}

struct Node *tree_add_left(struct Node *node)
  //@ requires tree(node);
  //@ ensures tree(\result);
{
  //@ unfold tree(node);
  if (node == NULL) {
    //@ fold tree(node);
    return node;
  } else {
    struct Node *n = alloc(struct Node);
    n->left = NULL;
    n->right = NULL;
    n->parent = node;
    n->total = 1;
    //@ fold subtreeHelper(n->left, n->right, n, n->total);
    
    struct Node *nodeLeft = node->left;
    if (nodeLeft != NULL) {
      //@ fold tree(node);
      return node;
    } else {
      //@ unfold subtreeHelper(nodeLeft, node->right, node, node->total);
      node->left = n;
      //@ fold context(n, node, 0);
      fixup_ancestors(n, node, 0, 1);
    
      //@ fold tree(n);
      return n;
    }
  }
}

struct Node *tree_add_right(struct Node *node)
  //@ requires tree(node);
  //@ ensures tree(\result);
{
  //@ unfold tree(node);
  if (node == NULL) {
    //@ fold tree(node);
    return node;
  } else {
    struct Node *n = alloc(struct Node);
    n->left = NULL;
    n->right = NULL;
    n->parent = node;
    n->total = 1;
    //@ fold subtreeHelper(n->left, n->right, n, n->total);
    
    struct Node *nodeRight = node->right;
    if (nodeRight != NULL) {
      //@ fold tree(node);
      return node;
    } else {
      //@ unfold subtreeHelper(node->left, nodeRight, node, node->total);
      node->right = n;
      //@ fold context(n, node, 0);
      fixup_ancestors(n, node, 0, 1);
    
      //@ fold tree(n);
      return n;
    }
  }
}

struct Node *tree_get_parent(struct Node *node)
  //@ requires tree(node);
  //@ ensures tree(\result);
{
  //@ unfold tree(node);
  if (node == NULL) {
    //@ fold tree(NULL);
    return NULL;
  } else {
    struct Node *parent = node->parent;
    if (parent == NULL) {
      //@ fold tree(NULL);
      return NULL;
    } else {
      //@ unfold context(node, parent, node->total);
      //@ assert context(parent, parent->parent, parent->total);
      //@ fold subtreeHelper(parent->left, parent->right, parent, parent->total);
      //@ fold tree(parent);
      return parent;
    }
  }
}

struct Node *tree_get_left(struct Node *node)
  //@ requires tree(node);
  //@ ensures tree(\result);
{
  //@ unfold tree(node);
  if (node == NULL) {
    //@ fold tree(NULL);
    return NULL;
  } else {
    struct Node *left = node->left;
    if (left != NULL) {
      //@ unfold subtreeHelper(left, node->right, node, node->total);
      //@ fold context(left, node, left->total);
    }
    //@ fold tree(left);
    return left;
  }
}

struct Node *tree_get_right(struct Node *node)
  //@ requires tree(node);
  //@ ensures tree(\result);
{
  //@ unfold tree(node);
  if (node == NULL) {
    //@ fold tree(NULL);
    return NULL;
  } else {
    struct Node *right = node->right;
    if (right != NULL) {
      //@ unfold subtreeHelper(node->left, right, node, node->total);
      //@ fold context(right, node, right->total);
    }
    //@ fold tree(right);
    return right;
  }
}

bool tree_has_parent(struct Node *node)
  //@ requires tree(node);
  //@ ensures tree(node);
{
  //@ unfold tree(node);
  bool res = false;
  if (node == NULL) {
  } else {
    struct Node *parent = node->parent;
    res = parent != NULL;
  }
  //@ fold tree(node);
  return res;
}

bool tree_has_left(struct Node *node)
  //@ requires tree(node);
  //@ ensures tree(node);
{
  //@ unfold tree(node);
  bool res = false;
  if (node == NULL) {
  } else {
    struct Node *left = node->left;
    res = left != NULL;
  }
  //@ fold tree(node);
  return res;
}

bool tree_has_right(struct Node *node)
  //@ requires tree(node);
  //@ ensures tree(node);
{
  //@ unfold tree(node);
  bool res = false;
  if (node == NULL) {
  } else {
    struct Node *right = node->right;
    res = right != NULL;
  }
  //@ fold tree(node);
  return res;
}

int main()
{

  int* stressLevel = alloc(int);
 // args_int("stress", stressLevel);
 // args_parse();

  struct Node *node = create_tree();
  node = tree_add_left(node);
  node = tree_add_right(node);
  node = tree_get_parent(node);
  node = tree_add_left(node);
  node = tree_get_parent(node);
  node = tree_get_parent(node);
  
  return 0;
}
