#use <runtime>
struct Node;

struct Node
{
  int val;
  struct Node* next;
  int _id;
};

void add_sorted(struct Node* list, struct OwnedFields* _ownedFields);
void add_sortedSeg(struct Node* start, struct Node* end, int endVal, struct OwnedFields* _ownedFields);
void add_sortedSegHelper(struct Node* start, struct Node* end, int prev, int endVal, struct OwnedFields* _ownedFields);
void appendLemmaAfterLoopBody(struct Node* a, struct Node* b, struct Node* c, int aPrev, int bVal, int cVal, int* _instanceCounter);
void appendLemmaLoopBody(struct Node* a, struct Node* b, struct Node* c, int aPrev, int cPrev, int bVal, int cVal, struct OwnedFields* _ownedFields);
struct Node* create_list(int val, int* _instanceCounter);
struct Node* list_insert(struct Node* list, int val, struct OwnedFields* _ownedFields);
int main();
void remove_sortedSegHelper(struct Node* start, struct Node* end, int prev, int endVal, struct OwnedFields* _ownedFields);
void sep_sortedSeg(struct Node* start, struct Node* end, int endVal, struct OwnedFields* _ownedFields);
void sep_sortedSegHelper(struct Node* start, struct Node* end, int prev, int endVal, struct OwnedFields* _ownedFields);
void sortedSeg(struct Node* start, struct Node* end, int endVal, struct OwnedFields* _ownedFields);
void sortedSegHelper(struct Node* start, struct Node* end, int prev, int endVal, struct OwnedFields* _ownedFields);

void add_sorted(struct Node* list, struct OwnedFields* _ownedFields)
{
  add_sortedSeg(list, NULL, -1, _ownedFields);
}

void add_sortedSeg(struct Node* start, struct Node* end, int endVal, struct OwnedFields* _ownedFields)
{
  if (!(start == end))
  {
    addAcc(_ownedFields, start->_id, 3, 0);
    addAcc(_ownedFields, start->_id, 3, 1);
    add_sortedSegHelper(start->next, end, start->val, endVal, _ownedFields);
  }
}

void add_sortedSegHelper(struct Node* start, struct Node* end, int prev, int endVal, struct OwnedFields* _ownedFields)
{
  if (!(start == end))
  {
    addAcc(_ownedFields, start->_id, 3, 0);
    addAcc(_ownedFields, start->_id, 3, 1);
    add_sortedSegHelper(start->next, end, start->val, endVal, _ownedFields);
  }
}

void appendLemmaAfterLoopBody(struct Node* a, struct Node* b, struct Node* c, int aPrev, int bVal, int cVal, int* _instanceCounter)
{
  if (b == c)
  {
  }
  else
  {
    if (a == b)
    {
    }
    else
    {
      appendLemmaAfterLoopBody(a->next, b, c, a->val, bVal, cVal, _instanceCounter);
    }
  }
}

void appendLemmaLoopBody(struct Node* a, struct Node* b, struct Node* c, int aPrev, int cPrev, int bVal, int cVal, struct OwnedFields* _ownedFields)
{
  bool _cond_1 = false;
  bool _cond_2 = false;
  bool _cond_3 = false;
  bool _cond_4 = false;
  bool _cond_5 = false;
  bool _cond_6 = false;
  bool _cond_7 = false;
  bool _cond_8 = false;
  bool _cond_9 = false;
  bool _cond_10 = false;
  bool _cond_11 = false;
  struct OwnedFields* _tempFields = NULL;
  struct OwnedFields* _tempFields1 = NULL;
  _cond_1 = b == c;
  _cond_2 = c == NULL;
  if (b == c)
  {
  }
  else
  {
    _cond_3 = a == b;
    if (a == b)
    {
      _cond_4 = b == a;
      _cond_5 = a == NULL;
      if (!_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && _cond_3 && _cond_4 && !_cond_5 && !(b == c) || !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && _cond_3 && _cond_4 && !_cond_5 && !(b == c) || !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && _cond_3 && _cond_4 && !_cond_5 && !(b == c) || !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_3 && _cond_4 && !_cond_5 && !(b == c) || !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_3 && _cond_4 && !_cond_5 && !(b == c) || !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_3 && _cond_4 && !_cond_5 && !(b == c))
      {
        assertAcc(_ownedFields, b != NULL ? b->_id : -1, 0, "Field access runtime check failed for struct Node.val");
      }
      if (!_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && _cond_3 && _cond_4 && !_cond_5 && !(b == c) || !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && _cond_3 && _cond_4 && !_cond_5 && !(b == c) || !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_3 && _cond_4 && !_cond_5 && !(b == c) || !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_3 && _cond_4 && !_cond_5 && !(b == c))
      {
        assertAcc(_ownedFields, b != NULL ? b->_id : -1, 1, "Field access runtime check failed for struct Node.next");
      }
      if (!_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && _cond_3 && _cond_4 && !_cond_5 && !(b == c) || !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_3 && _cond_4 && !_cond_5 && !(b == c))
      {
        assert(a->val >= aPrev);
        sortedSegHelper(a->next, c, a->val, cVal, _ownedFields);
      }
      _cond_11 = b == c;
    }
    else
    {
      _cond_6 = a == b;
      _tempFields = initOwnedFields(_ownedFields->instanceCounter);
      if (!_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !(b == c) && !(c == NULL))
      {
        assertAcc(_ownedFields, c != NULL ? c->_id : -1, 1, "Field access runtime check failed for struct Node.next");
      }
      if (!_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !(b == c) && !(c == NULL) && !(b == c) || !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !(b == c) && c == NULL && !(b == c))
      {
        assertAcc(_ownedFields, b != NULL ? b->_id : -1, 1, "Field access runtime check failed for struct Node.next");
      }
      if (!_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !(b == c) && !(c == NULL) && !(b == c) || !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !(b == c) && !(c == NULL) && !(b == c) || !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !(b == c) && c == NULL && !(b == c) || !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !(b == c) && c == NULL && !(b == c))
      {
        assertAcc(_ownedFields, b != NULL ? b->_id : -1, 0, "Field access runtime check failed for struct Node.val");
      }
      if (!_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !(b == c) && !(c == NULL) || !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !(b == c) && !(c == NULL) || !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !(b == c) && !(c == NULL))
      {
        assertAcc(_ownedFields, c != NULL ? c->_id : -1, 0, "Field access runtime check failed for struct Node.val");
      }
      if (!_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !(b == c) && !(c == NULL))
      {
        assert(cVal == cVal);
        assert(c->val >= cPrev);
      }
      if (!_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !(b == c) && !(c == NULL) && !(b == c) || !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !(b == c) && c == NULL && !(b == c))
      {
        assert(bVal == bVal);
      }
      if (!(c == NULL))
      {
        addAccEnsureSeparate(_tempFields, c != NULL ? c->_id : -1, 0, 3, "Overlapping field permissions for struct Node.val");
        addAccEnsureSeparate(_tempFields, c != NULL ? c->_id : -1, 1, 3, "Overlapping field permissions for struct Node.next");
      }
      if (!(b == c))
      {
        addAccEnsureSeparate(_tempFields, b != NULL ? b->_id : -1, 0, 3, "Overlapping field permissions for struct Node.val");
        addAccEnsureSeparate(_tempFields, b != NULL ? b->_id : -1, 1, 3, "Overlapping field permissions for struct Node.next");
      }
      _cond_7 = b == c;
      _cond_8 = c == NULL;
      appendLemmaLoopBody(a->next, b, c, a->val, cPrev, bVal, cVal, _ownedFields);
      if (!_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !_cond_7 && !_cond_8 && !_cond_7 && !(c == NULL) && !(a == c) || !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !_cond_7 && !_cond_8 && !_cond_7 && !(c == NULL) && !(a == c) || !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !_cond_7 && !_cond_8 && !_cond_7 && !(c == NULL) && !(a == c) || !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !_cond_7 && _cond_8 && !_cond_7 && c == NULL && !(a == c) || !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !_cond_7 && _cond_8 && !_cond_7 && c == NULL && !(a == c) || !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !_cond_7 && _cond_8 && !_cond_7 && c == NULL && !(a == c))
      {
        assertAcc(_ownedFields, a != NULL ? a->_id : -1, 0, "Field access runtime check failed for struct Node.val");
      }
      if (!_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !_cond_7 && !_cond_8 && !_cond_7 && !(c == NULL) && !(a == c) || !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !_cond_7 && !_cond_8 && !_cond_7 && !(c == NULL) && !(a == c) || !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !_cond_7 && _cond_8 && !_cond_7 && c == NULL && !(a == c) || !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !_cond_7 && _cond_8 && !_cond_7 && c == NULL && !(a == c))
      {
        assertAcc(_ownedFields, a != NULL ? a->_id : -1, 1, "Field access runtime check failed for struct Node.next");
      }
      if (!_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !_cond_7 && !_cond_8 && !_cond_7 && !(c == NULL) && !(a == c) || !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && _cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !_cond_7 && _cond_8 && !_cond_7 && c == NULL && !(a == c))
      {
        assert(a->val >= aPrev);
        sortedSegHelper(a->next, c, a->val, cVal, _ownedFields);
      }
      if (!_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !_cond_7 && !_cond_8 && !_cond_7 && !(c == NULL) && a == c && !(a == NULL))
      {
        assert(cVal >= aPrev);
      }
      _cond_9 = c == NULL;
      _cond_10 = a == c;
    }
  }
  _tempFields1 = initOwnedFields(_ownedFields->instanceCounter);
  if (!_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !_cond_7 && !_cond_8 && !_cond_7 && !_cond_9 && !_cond_10 && !(c == NULL) || !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && _cond_3 && _cond_4 && !_cond_5 && !_cond_11 && !(c == NULL) || !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !_cond_7 && !_cond_8 && !_cond_7 && !_cond_9 && !_cond_10 && !(c == NULL) || !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && _cond_3 && _cond_4 && !_cond_5 && !_cond_11 && !(c == NULL) || !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !_cond_7 && !_cond_8 && !_cond_7 && !_cond_9 && !_cond_10 && !(c == NULL) || !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && _cond_3 && _cond_4 && !_cond_5 && !_cond_11 && !(c == NULL))
  {
    assertAcc(_ownedFields, c != NULL ? c->_id : -1, 0, "Field access runtime check failed for struct Node.val");
  }
  if (!_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_3 && !_cond_6 && !_cond_7 && !_cond_8 && !_cond_7 && !_cond_9 && !_cond_10 && !(c == NULL) || !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && !_cond_2 && !_cond_1 && !_cond_1 && _cond_3 && _cond_4 && !_cond_5 && !_cond_11 && !(c == NULL))
  {
    assertAcc(_ownedFields, c != NULL ? c->_id : -1, 1, "Field access runtime check failed for struct Node.next");
    assert(cVal == cVal);
    assert(c->val >= cPrev);
  }
  if (!(c == NULL))
  {
    addAccEnsureSeparate(_tempFields1, c != NULL ? c->_id : -1, 0, 3, "Overlapping field permissions for struct Node.val");
    addAccEnsureSeparate(_tempFields1, c != NULL ? c->_id : -1, 1, 3, "Overlapping field permissions for struct Node.next");
  }
}

struct Node* create_list(int val, int* _instanceCounter)
{
  struct Node* n = NULL;
  n = alloc(struct Node);
  n->_id = *_instanceCounter;
  *_instanceCounter = *_instanceCounter + 1;
  n->val = val;
  n->next = NULL;
  return n;
}

struct Node* list_insert(struct Node* list, int val, struct OwnedFields* _ownedFields)
{
  struct Node* n = NULL;
  struct Node* curr = NULL;
  struct Node* tmp = NULL;
  struct Node* prev = NULL;
  bool _cond_1 = false;
  bool _cond_2 = false;
  bool _cond_3 = false;
  bool _cond_4 = false;
  bool _cond_5 = false;
  bool _cond_6 = false;
  bool _cond_7 = false;
  bool _cond_8 = false;
  bool _cond_9 = false;
  bool _cond_10 = false;
  bool _cond_11 = false;
  bool _cond_12 = false;
  bool _cond_13 = false;
  bool _cond_14 = false;
  bool _cond_15 = false;
  bool _cond_16 = false;
  bool _cond_17 = false;
  struct OwnedFields* _tempFields = NULL;
  struct Node* _ = NULL;
  add_sorted(list, _ownedFields);
  _cond_1 = list == NULL;
  _cond_2 = (list == NULL || !(list == NULL)) && (list == NULL || val <= list->val);
  if (list == NULL || val <= list->val)
  {
    n = alloc(struct Node);
    n->_id = addStructAcc(_ownedFields, 3);
    n->val = val;
    n->next = list;
    return n;
  }
  else
  {
    curr = list;
    _cond_3 = !(list == NULL) && list->next == NULL;
    _cond_14 = true;
    _cond_4 = true;
    _cond_5 = !(list == NULL) && list->next == NULL;
    _cond_6 = !(curr == NULL) && !(curr->next == NULL) && !(curr == NULL) && curr->next->val < val && !(curr->next == NULL);
    while (curr->next != NULL && curr->next->val < val)
    {
      prev = curr;
      curr = prev->next;
      _cond_7 = list == prev;
      _cond_8 = curr == curr;
      _cond_9 = curr == NULL;
      _cond_10 = list == prev;
      if (list == prev)
      {
      }
      else
      {
        _cond_11 = prev == curr;
        _cond_12 = curr == NULL;
        appendLemmaLoopBody(list->next, prev, curr, list->val, prev->val, prev->val, curr->val, _ownedFields);
        _cond_13 = curr == NULL;
      }
      if (!_cond_1 && !_cond_2 && !_cond_3 && _cond_4 && !_cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !(list == curr) || !_cond_1 && !_cond_2 && !_cond_3 && _cond_4 && !_cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !(list == curr) || !_cond_1 && !_cond_2 && !_cond_3 && _cond_4 && !_cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !(list == curr) || !_cond_1 && !_cond_2 && !_cond_3 && _cond_4 && !_cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !(list == curr) || !_cond_1 && !_cond_2 && _cond_3 && _cond_14 && _cond_4 && _cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !(list == curr) || !_cond_1 && !_cond_2 && _cond_3 && _cond_14 && _cond_4 && _cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !(list == curr) || !_cond_1 && !_cond_2 && _cond_3 && _cond_14 && _cond_4 && _cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !(list == curr) || !_cond_1 && !_cond_2 && _cond_3 && _cond_14 && _cond_4 && _cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !(list == curr))
      {
        assertAcc(_ownedFields, list != NULL ? list->_id : -1, 0, "Field access runtime check failed for struct Node.val");
        assertAcc(_ownedFields, list != NULL ? list->_id : -1, 1, "Field access runtime check failed for struct Node.next");
      }
      if (!_cond_1 && !_cond_2 && !_cond_3 && _cond_4 && !_cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !(list == curr) || !_cond_1 && !_cond_2 && !_cond_3 && _cond_4 && !_cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !(list == curr) || !_cond_1 && !_cond_2 && _cond_3 && _cond_14 && _cond_4 && _cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !(list == curr) || !_cond_1 && !_cond_2 && _cond_3 && _cond_14 && _cond_4 && _cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !(list == curr))
      {
        sortedSegHelper(list->next, curr, list->val, curr->val, _ownedFields);
      }
      _cond_15 = list == curr;
      if (!_cond_1 && !_cond_2 && !_cond_3 && _cond_4 && !_cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 || !_cond_1 && !_cond_2 && !_cond_3 && _cond_4 && !_cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 || !_cond_1 && !_cond_2 && _cond_3 && _cond_14 && _cond_4 && _cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 || !_cond_1 && !_cond_2 && _cond_3 && _cond_14 && _cond_4 && _cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15)
      {
        assertAcc(_ownedFields, curr != NULL ? curr->_id : -1, 1, "Field access runtime check failed for struct Node.next");
        assertAcc(_ownedFields, curr != NULL ? curr->_id : -1, 0, "Field access runtime check failed for struct Node.val");
      }
      _cond_16 = !(curr == NULL) && curr->next == NULL;
      _cond_17 = true;
      _tempFields = initOwnedFields(_ownedFields->instanceCounter);
      if (!_cond_1 && !_cond_2 && !_cond_3 && _cond_4 && !_cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 && !_cond_16 && !(curr->next == NULL) || !_cond_1 && !_cond_2 && !_cond_3 && _cond_4 && !_cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 && !_cond_16 && !(curr->next == NULL) || !_cond_1 && !_cond_2 && _cond_3 && _cond_14 && _cond_4 && _cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 && !_cond_16 && !(curr->next == NULL) || !_cond_1 && !_cond_2 && _cond_3 && _cond_14 && _cond_4 && _cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 && !_cond_16 && !(curr->next == NULL))
      {
        assertAcc(_ownedFields, curr->next != NULL ? curr->next->_id : -1, 0, "Field access runtime check failed for struct Node.val");
        assertAcc(_ownedFields, curr->next != NULL ? curr->next->_id : -1, 1, "Field access runtime check failed for struct Node.next");
      }
      if (!_cond_1 && !_cond_2 && !_cond_3 && _cond_4 && !_cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 && !_cond_16 || !_cond_1 && !_cond_2 && !_cond_3 && _cond_4 && !_cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 && _cond_16 && _cond_17 || !_cond_1 && !_cond_2 && !_cond_3 && _cond_4 && !_cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 && !_cond_16 || !_cond_1 && !_cond_2 && !_cond_3 && _cond_4 && !_cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 && _cond_16 && _cond_17 || !_cond_1 && !_cond_2 && _cond_3 && _cond_14 && _cond_4 && _cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 && !_cond_16 || !_cond_1 && !_cond_2 && _cond_3 && _cond_14 && _cond_4 && _cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 && _cond_16 && _cond_17 || !_cond_1 && !_cond_2 && _cond_3 && _cond_14 && _cond_4 && _cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 && !_cond_16 || !_cond_1 && !_cond_2 && _cond_3 && _cond_14 && _cond_4 && _cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 && _cond_16 && _cond_17)
      {
        assert(curr->val <= val);
        sortedSeg(list, curr, curr->val, _ownedFields);
      }
      if (!_cond_1 && !_cond_2 && !_cond_3 && _cond_4 && !_cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 && !_cond_16 && !(curr->next == NULL) || !_cond_1 && !_cond_2 && !_cond_3 && _cond_4 && !_cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 && !_cond_16 && !(curr->next == NULL) || !_cond_1 && !_cond_2 && _cond_3 && _cond_14 && _cond_4 && _cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 && !_cond_16 && !(curr->next == NULL) || !_cond_1 && !_cond_2 && _cond_3 && _cond_14 && _cond_4 && _cond_5 && _cond_6 && !_cond_7 && _cond_8 && !_cond_9 && !_cond_10 && !_cond_11 && !_cond_12 && !_cond_11 && !_cond_13 && !_cond_15 && !_cond_16 && !(curr->next == NULL))
      {
        sortedSegHelper(curr->next->next, NULL, curr->next->val, -1, _ownedFields);
      }
      addAccEnsureSeparate(_tempFields, curr != NULL ? curr->_id : -1, 0, 3, "Overlapping field permissions for struct Node.val");
      addAccEnsureSeparate(_tempFields, curr != NULL ? curr->_id : -1, 1, 3, "Overlapping field permissions for struct Node.next");
      sep_sortedSeg(list, curr, curr->val, _tempFields);
      if (!(curr->next == NULL))
      {
        addAccEnsureSeparate(_tempFields, curr->next != NULL ? curr->next->_id : -1, 1, 3, "Overlapping field permissions for struct Node.next");
        addAccEnsureSeparate(_tempFields, curr->next != NULL ? curr->next->_id : -1, 0, 3, "Overlapping field permissions for struct Node.val");
        sep_sortedSegHelper(curr->next->next, NULL, curr->next->val, -1, _tempFields);
      }
    }
    tmp = alloc(struct Node);
    tmp->_id = addStructAcc(_ownedFields, 3);
    tmp->val = val;
    tmp->next = curr->next;
    curr->next = tmp;
    if (list == curr)
    {
    }
    else
    {
      remove_sortedSegHelper(list->next, curr, list->val, curr->val, _ownedFields);
      if (!(_ == NULL))
      {
        loseAcc(_ownedFields, _->_id, 0);
        loseAcc(_ownedFields, _->_id, 1);
      }
      if (!(curr == _))
      {
        loseAcc(_ownedFields, curr->_id, 0);
        loseAcc(_ownedFields, curr->_id, 1);
        remove_sortedSegHelper(curr->next, _, curr->val, -1, _ownedFields);
      }
      appendLemmaAfterLoopBody(list->next, curr, NULL, list->val, curr->val, -1, _ownedFields->instanceCounter);
      add_sortedSegHelper(list->next, _, list->val, -1, _ownedFields);
      if (!(_ == NULL))
      {
        addAcc(_ownedFields, _->_id, 3, 0);
        addAcc(_ownedFields, _->_id, 3, 1);
      }
    }
    return list;
  }
}

int main()
{
  int stress = 0;
  struct Node* l = NULL;
  int i = 0;
  struct Node* l1 = NULL;
  int* _instanceCounter = NULL;
  struct OwnedFields* _tempFields = NULL;
  _instanceCounter = alloc(int);
  stress = 0;
  l = create_list(3, _instanceCounter);
  i = 0;
  while (i < stress)
  {
    _tempFields = initOwnedFields(_instanceCounter);
    l1 = list_insert(l, 1, _tempFields);
    i = i + 1;
    l = l1;
  }
  return 0;
}

void remove_sortedSegHelper(struct Node* start, struct Node* end, int prev, int endVal, struct OwnedFields* _ownedFields)
{
  if (!(start == end))
  {
    loseAcc(_ownedFields, start->_id, 0);
    loseAcc(_ownedFields, start->_id, 1);
    remove_sortedSegHelper(start->next, end, start->val, endVal, _ownedFields);
  }
}

void sep_sortedSeg(struct Node* start, struct Node* end, int endVal, struct OwnedFields* _ownedFields)
{
  if (!(start == end))
  {
    addAccEnsureSeparate(_ownedFields, start != NULL ? start->_id : -1, 0, 3, "Overlapping field permissions for struct Node.val");
    addAccEnsureSeparate(_ownedFields, start != NULL ? start->_id : -1, 1, 3, "Overlapping field permissions for struct Node.next");
    sep_sortedSegHelper(start->next, end, start->val, endVal, _ownedFields);
  }
}

void sep_sortedSegHelper(struct Node* start, struct Node* end, int prev, int endVal, struct OwnedFields* _ownedFields)
{
  if (!(start == end))
  {
    addAccEnsureSeparate(_ownedFields, start != NULL ? start->_id : -1, 0, 3, "Overlapping field permissions for struct Node.val");
    addAccEnsureSeparate(_ownedFields, start != NULL ? start->_id : -1, 1, 3, "Overlapping field permissions for struct Node.next");
    sep_sortedSegHelper(start->next, end, start->val, endVal, _ownedFields);
  }
}

void sortedSeg(struct Node* start, struct Node* end, int endVal, struct OwnedFields* _ownedFields)
{
  if (start == end)
  {
    assert(true);
  }
  else
  {
    assertAcc(_ownedFields, start != NULL ? start->_id : -1, 0, "Field access runtime check failed for struct Node.val");
    assertAcc(_ownedFields, start != NULL ? start->_id : -1, 1, "Field access runtime check failed for struct Node.next");
    sortedSegHelper(start->next, end, start->val, endVal, _ownedFields);
  }
}

void sortedSegHelper(struct Node* start, struct Node* end, int prev, int endVal, struct OwnedFields* _ownedFields)
{
  if (start == end)
  {
    if (end == NULL)
    {
      assert(true);
    }
    else
    {
      assert(endVal >= prev);
    }
  }
  else
  {
    assertAcc(_ownedFields, start != NULL ? start->_id : -1, 0, "Field access runtime check failed for struct Node.val");
    assertAcc(_ownedFields, start != NULL ? start->_id : -1, 1, "Field access runtime check failed for struct Node.next");
    assert(start->val >= prev);
    sortedSegHelper(start->next, end, start->val, endVal, _ownedFields);
  }
}
