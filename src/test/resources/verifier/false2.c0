struct Wrap {
    int f;
    bool b;
};

typedef struct Wrap Wrap;

/*@
    predicate dup(Wrap *x) = 
        false && acc(x->f) && acc(x->f);
@*/

void basic(Wrap* x, bool b) 
//@ requires ? && false;
//@ ensures acc(x->f) && acc(x->f);
{
}

void basic2(Wrap* x) 
//@ requires false && acc(x->f) && acc(x->f);
//@ ensures x->f == x->f + 2;
{}

void basic3(Wrap *x, bool b)
//@ requires ? && (b ? true : false && acc(x->f) && acc(x->f));
//@ ensures ? && (!b ? acc(x->f) && acc(x->f): true);
{}

void loop(int n, int a, int b, int c, int d, Wrap* x) 
//@ requires a == b && a != b;
{
    for (int i = 0; i < n; i++) 
    //@ loop_invariant true;
    {
        a = c + i;
        b = d - i;
    }
    //@ assert acc(x->f) && acc(x->f);
}


void fold(Wrap* x)
//@ requires ? && false;
{
    //@ fold dup(x);
    //@ fold dup(x);
    //@ fold dup(x);
    //@ unfold dup(x);
    //@ unfold dup(x);
}

void unfold(Wrap *x)
//@ requires ? && false;
{
    //@ unfold dup(x);
    //@ unfold dup(x);
    //@ unfold dup(x);
}

void inside(Wrap *x, bool b) 
//@ requires ? && x->b == x->b && dup(x);
{ 
    if (b) {
        //@ unfold dup(x);
    }
    else {
        if (x->b) {
            //@ unfold dup(x);
        }
        else {
            //@ unfold dup(x);
        }
    }
    //@ assert acc(x->b) && acc(x->b);
}

void alias(Wrap* x, Wrap *y) 
//@ requires ? && x == NULL && acc(x->f) && acc(y->f) && x == y;
//@ ensures ? && 1 * 3 * 9 == 4 / 2; 
{}

int main()
//@ requires true;
//@ ensures true;
{ 
    return 0; 
}   
