field head: Ref
field next: Ref
field val: Int

predicate acyclic(l: Ref) {
  acc(l.head) && listSeg(l.head, null)
}

predicate listSeg(from: Ref, to: Ref) {
  (from == to ? true : acc(from.next) && listSeg(from.next, to))
}

method insertLast(value: Int, this: Ref)
  requires acyclic(this)
  ensures true
{
  var v: Ref
  unfold acc(acyclic(this), write)
  if (this.head == null) {
    v := new(val, next)
    this.head := v
    this.head.val := value
    this.head.next := null
    // fold listSeg(this.head.next, null)// - why does verification pass when commenting this??
    fold listSeg(this.head, null)
    fold acyclic(this)
  } 
}

// Folding listSeg(this.head, null) might fail. There might be insufficient permission to access listSeg(from.next, to). (duplicatepredicate-problem.vpr@25.5)