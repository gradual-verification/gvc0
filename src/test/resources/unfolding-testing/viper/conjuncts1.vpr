field one: Int
field two: Int
field val: Int

predicate pair(this: Ref) {
  acc(this.one) && acc(this.two)
}

method pair_sum_greater_than_num(this: Ref, num: Ref) returns (answer: Bool)
  requires ? && true
  ensures pair(this) // no check pair(this)
{
  answer := unfolding pair(this) in (this.one + this.two > num.val) // check pair(this) and acc(num.val)
}

// WORKING (possible exception of conjuncts)

/*
[info] Total Conjuncts: 8
[info] Eliminated Conjuncts: 5
[info] Final runtime checks: TrieMap(GenericNode(acc(pair(this), write)) -> List(CheckInfo(acc(pair(this), write),List(),acc(pair(this), write),true)),
 GenericNode(num.val) -> List(CheckInfo(acc(num.val, write),List(),num.val,false)))
*/

// Question: why is the conjunct difference here 3? (It counts 2 when evaluating expression b btw)