// FULLY SPECIFIED PROGRAM

struct Node {
    int val;
    struct Node* next;
};
struct List {
    struct Node* head;
};


/*@
predicate listSeg(struct Node *from, struct Node *to) = from == to ? true : acc(from->val) && acc(from->next) && listSeg(from->next, to);
@*/

/*@
predicate acyclic(struct List *l) = acc(l->head) && listSeg(l->head, NULL);
@*/

void appendLemma(struct Node *a, struct Node *b, struct Node *c)
//@requires listSeg(a,b) && listSeg(b,c);
//@ensures listSeg(a,c);
{
    if (a == b){

    } else {
        //@unfold listSeg(a,b);
        appendLemma(a->next, b, c);
        //@fold listSeg(a,c); 
    }
}


void insertLastHelper(int val, struct List* this)
//@requires acyclic(this) && unfolding acyclic(this) in (this->head != NULL);
//@ensures acyclic(this);
{
    //@unfold acyclic(this);
    struct Node* y = this->head;
    //@fold listSeg(this->head,y);
    //@unfold listSeg(y, NULL);
    while (y->next != NULL)
    //@loop_invariant y != NULL && acc(this->head) && listSeg(this->head,y) && acc(y->val) && acc(y->next) && listSeg(y->next, NULL);
    {
        struct Node* x = y;
        y = y->next;
        //@unfold listSeg(y, NULL);
        //@fold listSeg(x->next, y);
        //@fold listSeg(x,y);
        appendLemma(this->head, x, y);
    }
    y->next = alloc(struct Node);
    y->next->val = val;
    y->next->next = NULL;
    // //@fold listSeg(y->next->next, NULL);  - commenting this makes verification succeed
    //@fold listSeg(y->next, NULL);
    //@fold listSeg(y, NULL);
    appendLemma(this->head, y, NULL);
    //@fold acyclic(this);
}

void insertLast(int val, struct List* this)
//@requires acyclic(this);
//@ensures acyclic(this);
{
    //@unfold acyclic(this);
    if (this->head == NULL) {
        this->head = alloc(struct Node);
        this->head->val = val;
        this->head->next = NULL;
        // //@fold listSeg(this->head->next, NULL); - commenting this makes verification succeed
        //@fold listSeg(this->head, NULL);
        //@fold acyclic(this);
    } 
    else {
        //@fold acyclic(this);
        insertLastHelper(val, this);
    }
}

int main()
//@requires true;
//@ensures true;
{
    return 2;
}